{"version":3,"sources":["routes.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["axios","defaults","baseURL","routes","owner","repo","App","useState","readmeHtml","setReadmeHtml","repos","setRepos","value","setValue","inputValue","useRef","useEffect","get","params","q","per_page","then","response","data","items","onReadmeButtonClick","onRenderMarkdown","content","getReadme","text","str","post","decodeURIComponent","escape","window","atob","reposList","length","map","el","className","onClick","login","name","full_name","description","language","id","onSubmit","e","preventDefault","current","type","ref","dangerouslySetInnerHTML","__html","fetchCount","amount","Promise","resolve","setTimeout","incrementAsync","createAsyncThunk","a","counterSlice","createSlice","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.002dca24.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.github.com';\n\nexport const routes = {\n  searchUsersUrl: () => '/search/users',\n  searchRepositoriesUrl: () => '/search/repositories',\n  getReadmeUrl: (owner, repo) => `/repos/${owner}/${repo}/readme`,\n  postRenderMarkdown: () => '/markdown',\n  // userLoginUrl: () => 'users/login',\n  // getProfileUrl: () => 'user',\n  // getArticleUrl: (slug) => `articles/${slug}`,\n  // getArticlesListUrl: (limit = 10, offset = 0) => `articles?limit=${limit}&offset=${offset}`,\n  // setFavoriteArticleURL: (slug) => `articles/${slug}/favorite`,\n  // articlePostUrl: () => 'articles',\n  // articleEditUrl: (slug) => `articles/${slug}`,\n  // articleDeleteUrl: (slug) => `articles/${slug}`,\n};","import React, { useState, useEffect, useRef } from 'react';\n\nimport './App.css';\nimport axios from 'axios';\nimport { routes } from './routes';\n\nfunction App() {\n  const [readmeHtml, setReadmeHtml] = useState('');\n  const [repos, setRepos] = useState([]);\n  const [value, setValue] = useState('ikzsl');\n  const inputValue = useRef();\n\n  useEffect(() => {\n    axios\n      .get(routes.searchRepositoriesUrl(), {\n        params: {\n          q: value,\n          per_page: 5,\n        },\n      })\n      .then((response) => {\n        setRepos(response.data.items);\n      });\n  }, [value]);\n\n  const b64_to_utf8 = (str) => decodeURIComponent(escape(window.atob(str)));\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    setValue(inputValue.current.value);\n  };\n\n  const getReadme = (owner, repo) => {\n    axios\n      .get(routes.getReadmeUrl(owner, repo), {\n        params: {\n          owner,\n          repo,\n        },\n      })\n      .then((response) => {\n        onRenderMarkdown(response.data.content);\n      });\n  };\n\n  const onReadmeButtonClick = (owner, repo) => {\n    getReadme(owner, repo);\n  };\n\n  const onRenderMarkdown = (text) => {\n    axios\n      .post(routes.postRenderMarkdown(), {\n        text: b64_to_utf8(text),\n      })\n      .then((response) => {\n        setReadmeHtml(response.data);\n      });\n  };\n\n  const reposList = repos.length\n    ? repos.map((el) => (\n        <tr key={el.id} className='list-item' onClick={() => onReadmeButtonClick(el.owner.login, el.name)}>\n          <td>{el.full_name}</td>\n          <td>{el.description}</td>\n          <td>{el.language}</td>\n        </tr>\n      ))\n    : null;\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <form onSubmit={onSubmit}>\n          <input type='text' name='search' ref={inputValue} />\n          <button type='submit'>search repos by keywords</button>\n        </form>\n      </header>\n      <div className='main-content'>\n        <div className='items-list'>\n          <table>\n            <thead>\n              <tr>\n                <th> Name </th>\n                <th> Description </th>\n                <th> Language </th>\n              </tr>\n            </thead>\n            <tbody>{reposList}</tbody>\n          </table>\n        </div>\n        <div className='content-field'>\n          <div dangerouslySetInnerHTML={{ __html: readmeHtml }}></div>\n        </div>\n      </div>\n      <div className='button'>details</div>\n    </div>\n  );\n}\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}